service: shopify-backend-S2019

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  memorySize: 128
  apiKeys:
    - main
  environment:
    PRODUCTS_TABLE: ${self:service}-products
    CARTS_TABLE: ${self:service}-carts
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: 
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CARTS_TABLE}

functions:
  updateItem:
    handler: src/products.update
    events:
    - http:
        path: products/update
        method: post
        private: true
  getItems:
    handler: src/products.getAll
    events:
    - http:
        path: products/query
        method: get
        private: true
  queryItem:
    handler: src/products.query
    events:
    - http:
        path: products/query
        method: post
        private: true
  createCart:
    handler: src/carts.create
    events:
    - http:
        path: cart/create
        method: post
        private: true
  updateCart_addItem:
    handler: src/carts.addItem
    events:
    - http:
        path: cart/update
        method: put
        private: true
  updateCart_removeItem:
    handler: src/carts.removeItem
    events:
    - http:
        path: cart/update
        method: delete
        private: true
  completeCart:
    handler: src/carts.complete
    events:
    - http:
        path: cart/complete
        method: post
        private: true
  cartInfo:
    handler: src/carts.info
    events:
    - http:
        path: cart/info
        method: post
        private: true

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: title
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CartsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CARTS_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

package:
  excludeDevDependencies: true



# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
